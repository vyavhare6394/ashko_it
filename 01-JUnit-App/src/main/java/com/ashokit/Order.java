package com.ashokit;

public class Order {

	
	 private static int nextNumber;
     private int number;
     private Customer customer;
     private Map<Product, Integer> lines;
     
     /**
      * Represents an order with an ordernumber (autogenerated), customer, and order lines with products and quantities.
      * @param customer
      */
     public Order(Customer customer) {
             this.number = nextNumber++;
             this.customer = customer;
             this.lines = new HashMap<Product, Integer>();
     }
     
     /**
      * Adds a quantity of a product to the order. If the product is already in the order, increase the order quantity by the quantity.
      * @param product
      * @param quantity must be non-negative
      * @throws IllegalArgumentException if the quantity is negative
      */
     public void addToOrder(Product product, int quantity) {
             if (quantity < 0) {
                     throw new IllegalArgumentException("Quantity must be non-negative.");
             }
             
             if (lines.containsKey(product)) {
                     lines.put(product, lines.get(product) + quantity);
             } else {
                     lines.put(product, quantity);
             }
     }
     
     /**
      * Remove a quantity of a product from the order. If the product is already in the order, decrease the order quantity by the quantity.
      * If the quantity is reduced to zero, remove the product from the order.
      * If the product is in the order, return true. If the product is not in the order, return false.
      * @param product
      * @param quantity must be non-negative
      * @return true if the product was in the order, false otherwise
      */
     public boolean removeFromOrder(Product product, int quantity) {
             if (quantity < 0) {
                     throw new IllegalArgumentException("Quantity must be non-negative.");
             }
             
             if (lines.containsKey(product)) {
                     if (lines.get(product) <= quantity) {
                             lines.remove(product);
                     } else {
                             lines.put(product, lines.get(product) - quantity);
                     }
                     return true;
             } else {
                     return false;
             }
     }
     
     /**
      * Determine if a product is in the order
      * @param product to check for
      * @return whether the product is in the order
      */
     public boolean contains(Product product) {
             return lines.containsKey(product);
     }
     
     /**
      * Determine the quantity of a product in the order
      * @param product to check
      * @return quantity of the product in the order
      */
     public int getItemQuantity(Product product) {
             if (contains(product)) {
                     return lines.get(product);
             } else {
                     return 0;
             }
     }
     
     /**
      * Returns the total cost of the order (unit prices * quantity)
      * @return the total cost of the order (unit prices * quantity)
      */
     public double getOrderTotal() {
             double total = 0;
             
             for (Map.Entry<Product,Integer> entry : lines.entrySet()) {
                 Product key = entry.getKey();
                 Integer value = entry.getValue();
                 total += key.getUnitPrice() * value;
             }
             
             return total;
     }
     
     /**
      * Returns the number of order lines.
      * @return the number of order lines
      */
     public int getOrderLineCount() {
             return lines.size();
     }
     
     /**
      * Returns the number of items in the order (sum of quantity of all lines)
      * @returnthe number of items in the order (sum of quantity of all lines)
      */
     public int getOrderItemCount() {
             int total = 0;
             
             for (Map.Entry<Product,Integer> entry : lines.entrySet()) {
                 total += entry.getValue();
             }
             
             return total;
     }

     @Override
     public String toString() {
             return "Order [number=" + number + ", customer=" + customer + ", lines=" + lines + "]";
     }

     /** 
      * Orders are equal *only* if their order numbers are equal
      * @see java.lang.Object#equals(java.lang.Object)
      */
     @Override
     public boolean equals(Object obj) {
             if (this == obj)
                     return true;
             if (obj == null)
                     return false;
             if (getClass() != obj.getClass())
                     return false;
             Order other = (Order) obj;
             if (number != other.number)
                     return false;
             return true;
     }
     
	
	
	
	
	
}
